Lab: Laravel 路由與控制器使用練習


1.  建立開發環境


1.0 請依 setup.txt 完成安裝與設計。


1.1 在檔案總管，滑鼠右鍵點按例如 c:\Lab 資料夾
    | 快捷功能表 Git Bach Here


1.2 輸入下列指令，建立一個新的 Laravel 專案
    laravel new workout


1.3 在檔案總管，滑鼠右鍵點按 workout 資料夾 | Open with Code




2.  基本路由與工作分派


2.1 編輯 routes\web.php，加入下列程式:

Route::get('/lab', "LabController@index");

<Note>
關於第二個參數，請留意 @ 符號的前後分別是指什麼?


2.2 Ctrl + ` 開啟終端機視窗，輸入下列指令以建立控制器:
php artisan make:controller LabController


2.3 編輯 app\Http\Controllers\LabController.php
    加入下列函式到控制器類別:

    function index() {
        return "Lab Controller index action";
    }


2.4 終端機視窗，輸入下列指令以啟動 Web 伺服器:
php artisan serve


2.5 以瀏覽器連接 http://127.0.0.1:8000/lab

<Note> 正常的話，應該出現 Lab Controller index action 字樣




3.  傳送參數資料給控制器


3.1 編輯 routes\web.php，加入下列程式:

Route::get('/lab/show/{id}', "LabController@show");


3.2 app\Http\Controllers\LabController.php
    加入下列函式到控制器類別:

    function show($id) {
        dd($id);
    }


3.3 以瀏覽器連接 http://127.0.0.1:8000/lab/show/3

<Note> 正常的話，應該出現 3 字樣


3.4 編輯 routes\web.php，加入下列程式:

Route::get('/lab/param', "LabController@param");


3.5 app\Http\Controllers\LabController.php
    加入下列函式到控制器類別:

    function param(Request $request) {
        // dd($request->all());
        // dd($request->query('data'));
        // dd($request->input());
        dd($request->input('data'));
    }    


3.6 以瀏覽器連接 http://127.0.0.1:8000/lab/param?id=6&data=3

<Note> 正常的話，應該出現 3 字樣




4.  傳送表單資料給控制器


4.1 編輯 routes\web.php，加入下列程式:

Route::get('/lab/form', "LabController@getForm");
Route::post('/lab/form/{id}', "LabController@postForm");


4.2 app\Http\Controllers\LabController.php
    加入下列函式到控制器類別:

    function getForm() {
        return view("lab.aForm");
    }


4.3 在 resources\views 新建一個資料夾，名稱 lab


4.4 在 lab 資料夾新建php程式，檔名: aForm.blade.php
    內容如下:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    <h1>Form</h1>

    <form method="post" action="/lab/form/3?data=999">
        @csrf
        First name:
        <input type="text" name="firstName"> <br>
        Last name:
        <input type="text" name="lastName"> <br>
        <input type="submit" value="OK">
    </form>
</body>
</html>


4.5 app\Http\Controllers\LabController.php
    加入下列函式到控制器類別:

    function postForm(Request $request) {
        // dd($request->input());
        dd($request->input('firstName'));
    }


4.6 以瀏覽器連接 http://127.0.0.1:8000/lab/form
    輸入表單資料，點按 OK 按鈕




5.  控制器的回應

5.1 回顧一下上述練習，控制器的方法可回應
    (A) 字串
    (B) View (中文翻譯為: 視圖或檢視)
    接下來我們再看其他作法


5.2 編輯 routes\web.php，加入下列程式:

Route::get('/lab/xml', "LabController@xml");


5.3 app\Http\Controllers\LabController.php
    加入下列函式到控制器類別:

    function xml() {
        $content = "<book><title>ooo</title><price>500</price></book>";
        return response($content, 200, 
            [
                'Content-Type' => 'application/xml'
            ]);
    }


5.4 以瀏覽器連接 http://127.0.0.1:8000/lab/xml


5.5 編輯 routes\web.php，加入下列程式:

Route::get('/lab/memberOnly', "LabController@memberOnly");


5.6 app\Http\Controllers\LabController.php
    加入下列函式到控制器類別:

    function memberOnly() {
        // if (使用者尚未登入) {
            return redirect('lab/form');
        // }
        // go ahead
    }


5.7 以瀏覽器連接 http://127.0.0.1:8000/lab/memberOnly


<Note> 參考資料
https://laravel.tw/docs/5.2/responses




6.  RESTful 資源控制器


6.1 請想一下，如果有一個應用程式需要增查修改員工資料，
    是否只能一一定義下列路由，這樣子會不會很麻煩呢?

Route::get('/employees', 'EmployeesController@index');
Route::get('/employees/index', 'EmployeesController@index');
Route::get('/employees/create', 'EmployeesController@create');
Route::post('/employees/create', 'EmployeesController@post_Create');
Route::get('/employees/show/{id}', 'EmployeesController@show');
Route::get('/employees/edit/{id}', 'EmployeesController@edit');
Route::post('/employees/edit/{id}', 'EmployeesController@post_Edit');
Route::get('/employees/delete/{id}', 'EmployeesController@delete');
Route::post('/employees/delete/{id}', 'EmployeesController@post_Delete');


6.2 在終端機視窗，Ctrl + C 停止網站伺服器


6.3 在終端機視窗，輸入下列指令以建立控制器:
php artisan make:controller DataController --resource


6.4 檢視 app\Http\Controllers\DataController.php

<Note> 請問與之前的 LabController 有何不同?


6.5 修改 app\Http\Controllers\DataController.php，
    將每一個函式都改成傳回簡單字串，例如:

    public function index()
    {
        return "index";
    }

    public function create()
    {
        return "create";
    }
    // ...


6.6 編輯 routes\web.php，加入下列程式:

Route::resource('data', 'DataController');


6.7 終端機視窗，輸入下列指令以啟動 Web 伺服器:
php artisan serve


6.8 以瀏覽器分別連接下列網址:

http://127.0.0.1:8000/data
http://127.0.0.1:8000/data/create


6.9 編輯 routes\web.php，修改 Route::resource 那一行程式，如下:

Route::resource('data', 'DataController', 
    ['only' => ['index', 'show']]);

完成後，以瀏覽器分別連接下列網址:

http://127.0.0.1:8000/data
http://127.0.0.1:8000/data/3
http://127.0.0.1:8000/data/create




<Note> 參考資料
https://laravel.tw/docs/5.2/controllers#restful-resource-controllers

